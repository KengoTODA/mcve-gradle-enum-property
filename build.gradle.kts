enum class Values {
    FOO,
    BAR,
    BAZ
}

abstract class MyTask : DefaultTask() {
    @get:Input
    @get:Optional
    abstract val prop: Property<Values>

    init {
        this.prop.convention(Values.FOO)
    }

    @TaskAction
    fun run() {
        println("prop is ${prop.get()} for $name")
    }
}

fun Property<Values>.assign(value: String) =
    set(Values.valueOf(value))

tasks {
    val fooTask by registering(MyTask::class) {
    }

    val barTask by registering(MyTask::class) {
        prop = "BAR"
    }

    val bazTask by registering(MyTask::class) {
        prop = Values.BAZ
    }

    create("check") {
        dependsOn(fooTask)
        dependsOn(barTask)
        dependsOn(bazTask)
    }
}
